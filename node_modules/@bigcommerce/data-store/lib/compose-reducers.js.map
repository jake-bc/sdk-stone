{"version":3,"file":"compose-reducers.js","sourceRoot":"","sources":["../src/compose-reducers.ts"],"names":[],"mappings":";;AAAA,iCAAwD;AAKxD;IACI,kBAA4C;SAA5C,UAA4C,EAA5C,qBAA4C,EAA5C,IAA4C;QAA5C,6BAA4C;;IAE5C,OAAO,UAAC,KAAK,EAAE,MAAM;QACjB,IAAM,QAAQ,GAAG,kBAAS,CAAC,KAAK,CAC5B,IAAI,EACJ,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,mBAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAA3B,CAA2B,CAAC,CACvD,CAAC,KAAK,CAAC,CAAC;QAET,OAAO,gBAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;IACvD,CAAC,CAAC;AACN,CAAC;AAXD,kCAWC","sourcesContent":["import { curryRight, flowRight, isEqual } from 'lodash';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...reducers: Array<Reducer<TState, TAction>>\n): Reducer<TState, TAction> {\n    return (state, action) => {\n        const newState = flowRight.apply(\n            null,\n            reducers.map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return isEqual(state, newState) ? state : newState;\n    };\n}\n"]}