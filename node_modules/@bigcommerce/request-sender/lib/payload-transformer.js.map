{"version":3,"file":"payload-transformer.js","sourceRoot":"","sources":["../src/payload-transformer.ts"],"names":[],"mappings":";;;AAIA,IAAM,wBAAwB,GAAG,2BAA2B,CAAC;AAE7D;IAAA;IA+DA,CAAC;IA9DG,0CAAa,GAAb,UAAc,OAAuB;QACjC,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAE5F,IAAI,OAAO,CAAC,IAAI,IAAI,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC5D,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACvC;QAED,OAAO,OAAO,CAAC,IAAI,CAAC;IACxB,CAAC;IAED,uCAAU,GAAV,UAAW,GAAmB;QAC1B,IAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAGxE,IAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAChC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAE,GAAW,CAAC,YAAY,EAC5D,OAAO,CACV,CAAC;QAEF,OAAO;YACH,IAAI,MAAA;YACJ,OAAO,SAAA;YACP,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,UAAU,EAAE,GAAG,CAAC,UAAU;SAC7B,CAAC;IACN,CAAC;IAEO,+CAAkB,GAA1B,UAA2B,IAAY,EAAE,OAAgB;QACrD,IAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAE7D,IAAI,IAAI,IAAI,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACpD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,kDAAqB,GAA7B,UAA8B,UAAkB;QAC5C,IAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvF,OAAO,KAAK,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,IAAI;;YAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAM,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAEzC,IAAI,CAAC,GAAG,EAAE;gBACN,OAAO,OAAO,CAAC;aAClB;YAED,4BACO,OAAO,eACT,GAAG,CAAC,WAAW,EAAE,IAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,OAC7C;QACN,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;IAEO,uCAAU,GAAlB,UAAmB,OAAgB,EAAE,GAAW;QAC5C,IAAI,CAAC,OAAO,IAAI,CAAC,GAAG,EAAE;YAClB,OAAO,EAAE,CAAC;SACb;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IAC5D,CAAC;IACL,yBAAC;AAAD,CAAC,AA/DD,IA+DC","sourcesContent":["import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.stringify(options.body);\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n"]}